services:
  web:
    build:
      context: ./crm_project
      dockerfile: dockerfiles/Dockerfile.web
    command: >
      bash -c "
        mkdir -p /app/static &&
        echo 'Waiting for database to start...' &&
        sleep 5 &&
        find . -path \"*/migrations/*.py\" -not -name \"__init__.py\" -delete &&
        find . -path \"*/migrations/*.pyc\" -delete &&
        echo 'Creating migrations for signals app...' &&
        python manage.py makemigrations signals &&
        echo 'Creating migrations for trading_bot app...' &&
        python manage.py makemigrations trading_bot &&
        echo 'Applying migrations...' &&
        python manage.py migrate &&
        echo 'Importing symbols...' &&
        python manage.py import_symbols &&
        echo 'Creating superuser if not exists...' &&
        python -c \"
          import django; django.setup();
          from django.contrib.auth.models import User;
          from django.db.utils import IntegrityError;
          import os;
          username = os.environ.get('DJANGO_SUPERUSER_USERNAME', 'admin');
          email = os.environ.get('DJANGO_SUPERUSER_EMAIL', 'admin@example.com');
          password = os.environ.get('DJANGO_SUPERUSER_PASSWORD', 'admin');
          try:
            if not User.objects.filter(is_superuser=True).exists():
              User.objects.create_superuser(username, email, password);
              print(f'Superuser {username} created successfully');
            else:
              print('Superuser already exists');
          except IntegrityError:
            print('Superuser already exists');
        \" &&
        echo 'Starting Django server...' &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./crm_project:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=crm_project.settings
      - DJANGO_ENV=development
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
      - DJANGO_SUPERUSER_PASSWORD=admin
    depends_on:
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  celery-bot:
    build: 
      context: ./crm_project
      dockerfile: dockerfiles/Dockerfile.celery-bot
    command: >
      bash -c "
        echo 'Waiting for web service to be ready...' &&
        while ! curl -s http://web:8000/admin/ > /dev/null; do
          sleep 5
          echo 'Still waiting for web service...'
        done &&
        echo 'Web service is ready, starting celery worker...' &&
        celery -A crm_project worker -l INFO -Q bot_queue
      "
    volumes:
      - ./crm_project:/app
    depends_on:
      web:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DJANGO_SETTINGS_MODULE=crm_project.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - IB_HOST=host.docker.internal
      - IB_PORT=4002
      - IB_CLIENT_ID=1234
      - PYTHONUNBUFFERED=1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - app-network

  celery-signals:
    build: 
      context: ./crm_project
      dockerfile: dockerfiles/Dockerfile.celery-signals
    command: >
      bash -c "
        echo 'Waiting for web service to be ready...' &&
        while ! curl -s http://web:8000/admin/ > /dev/null; do
          sleep 5
          echo 'Still waiting for web service...'
        done &&
        echo 'Web service is ready, starting celery worker...' &&
        celery -A crm_project worker -l INFO -Q signals_queue
      "
    volumes:
      - ./crm_project:/app
    depends_on:
      web:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DJANGO_SETTINGS_MODULE=crm_project.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped
    networks:
      - app-network

  celery-beat:
    build:
      context: ./crm_project
      dockerfile: dockerfiles/Dockerfile.celery-beat
    command: >
      bash -c "
        echo 'Waiting for web service to be ready...' &&
        while ! curl -s http://web:8000/admin/ > /dev/null; do
          sleep 5
          echo 'Still waiting for web service...'
        done &&
        echo 'Web service is ready, starting celery beat...' &&
        celery -A crm_project beat -l INFO
      "
    volumes:
      - ./crm_project:/app
    depends_on:
      web:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DJANGO_SETTINGS_MODULE=crm_project.settings
      - DJANGO_ENV=development
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

volumes:
  redis-data:

networks:
  app-network:
    driver: bridge 